# -*- coding: utf-8 -*-
"""12 assignment.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QGlb2CWjOvhWi6OHC_ARSRLNovxUY2FO
"""

#1 solution

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def deleteMiddleNode(head):
    if head is None or head.next is None:
        return None

    slow = head
    fast = head
    prev = None

    while fast is not None and fast.next is not None:
        fast = fast.next.next
        prev = slow
        slow = slow.next

    prev.next = slow.next

    return head

# Example usage
# 1 -> 2 -> 3 -> 4 -> 5
head = ListNode(1)
head.next = ListNode(2)
head.next.next = ListNode(3)
head.next.next.next = ListNode(4)
head.next.next.next.next = ListNode(5)

new_head = deleteMiddleNode(head)


current = new_head
while current is not None:
    print(current.val, end=" -> ")
    current = current.next

#2solution

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def hasCycle(head):
    if head is None or head.next is None:
        return False

    slow = head
    fast = head.next

    while fast is not None and fast.next is not None:
        if slow == fast:
            return True

        slow = slow.next
        fast = fast.next.next

    return False


head = ListNode(1)
head.next = ListNode(2)
head.next.next = ListNode(3)
head.next.next.next = ListNode(4)
head.next.next.next.next = ListNode(5)
head.next.next.next.next.next = head.next  # Creating a loop

print(hasCycle(head))  # Output: True

#solution4

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def findNthFromEnd(head, n):
    if head is None:
        return None

    slow = head
    fast = head

    # Move the fast pointer n positions ahead
    for _ in range(n):
        if fast is None:
            return None
        fast = fast.next

    # Move both pointers simultaneously until the fast pointer reaches the end
    while fast is not None and fast.next is not None:
        slow = slow.next
        fast = fast.next

    return slow


head = ListNode(1)
head.next = ListNode(2)
head.next.next = ListNode(3)
head.next.next.next = ListNode(4)
head.next.next.next.next = ListNode(5)

n = 2
nth_node = findNthFromEnd(head, n)

if nth_node is not None:
    print(nth_node.val)  # Output: 4
else:
    print("Nth node not found.")

#soltuion5

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def isPalindrome(head):
    if head is None or head.next is None:
        return True

    slow = head
    fast = head

    # Move fast pointer to the end and slow pointer to the middle
    while fast.next is not None and fast.next.next is not None:
        slow = slow.next
        fast = fast.next.next

    second_half = reverseLinkedList(slow.next)  # Reverse the second half of the list
    current = head

    # Compare values of first half and reversed second half
    while second_half is not None:
        if current.val != second_half.val:
            return False

        current = current.next
        second_half = second_half.next

    return True

def reverseLinkedList(head):
    prev = None
    current = head

    while current is not None:
        next_node = current.next
        current.next = prev
        prev = current
        current = next_node

    return prev


head = ListNode('a')
head.next = ListNode('b')
head.next.next = ListNode('c')
head.next.next.next = ListNode('b')
head.next.next.next.next = ListNode('a')

print(isPalindrome(head))

#6 solutin

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def detectAndRemoveLoop(head):
    if head is None or head.next is None:
        return

    slow = head
    fast = head

    # Detect the loop using the Floyd's Tortoise and Hare algorithm
    while fast is not None and fast.next is not None:
        slow = slow.next
        fast = fast.next.next

        if slow == fast:
            break

    # If there is no loop, return
    if slow != fast:
        return

    # Move the slow pointer back to the head and find the meeting point
    slow = head
    while slow.next != fast.next:
        slow = slow.next
        fast = fast.next

    # Unlink the last node to remove the loop
    fast.next = None



head = ListNode(1)
head.next = ListNode(2)
head.next.next = ListNode(3)
head.next.next.next = ListNode(4)
head.next.next.next.next = ListNode(5)
head.next.next.next.next.next = head.next  # Creating a loop

detectAndRemoveLoop(head)

# Print the modified linked list
current = head
while current is not None:
    print(current.val, end=" -> ")
    current = current.next

